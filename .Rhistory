end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.00639, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.007, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.00750, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.008, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.0085, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.009, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.01, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.02, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.03, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.04, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.05, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 250
end <- 300
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=4, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 300
end <- 400
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=4, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 0
end <- 2662
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=4, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
# plot it with a LOESS smooth curve
ts <- zoo(value, time)
ma <- rollmean(ts, 5)
mm <- rollmedian(ts, 5)
start <- 0
end <- 2662
plot(value[start:end]~time[start:end],
cex=1.2,
xlab='Time',
ylab='Value')
# loess
l <- loess(value~time, data=df, span=.004, degree=2, family='symmetric')
lines(l$fitted~time, col='dodgerblue3', lwd=2.8)
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
length(time)
length(ma)
shiny::runApp('Documents/Projects/outliers/app')
URL <- "/Users/carolyn/Desktop/mason.tank.may.2013.json"
tank <- fromJSON(URL) # list
mydata <- tank$series$data # list
d <- mydata[[1]] # matrix (2 columns)
time <- d[,1] # numeric
value <- d[,2] # numeric
# convert from timestamp to human readable
time <- as.POSIXct(time, origin="1970-01-01", tz="GMT")
#boxplot.stats(value, coef=0.75, do.out=T)
m <- cbind(value, time)
df <- as.data.frame(m)
ts <- zoo(value, time)
outliers <- c(272, 299, 360, 464, 806, 1011, 1182, 1560, 2080, 2511, 2538, 2608)
mm <- rollmedian(ts, 5, align="center")
length(mm)
head(mm)
class(mm)
typeof(mm)
head(value)
length(time)
length(time[1:length(mm)])
mm[1]
mm[2]
mm[1,2]
mm[1:2]
length(ts)
length(ma)
length(mm)
ts[1:length(ma)]
ts[1:length(mm)]
res <- mm - ts[1:length(mm)]
length(res)
length(mm)
length(ts[1:length(mm)])
length(ts[1:length(mm+1)])
class(mm)
class(ts[1:length(mm)])
head(mm)
head(ts)
coredata(ts)
length(coredata(ts))
length(coredata(mm))
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
getwd()
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
time[outliers]
value[outliers]
shiny::runApp('Documents/Projects/outliers/app')
head(residuals)
residuals
class(residuals)
l$residuals
class(residuals)
for (i %in% residuals) {}
for (i %in% residuals) { i }
for (i in residuals) {i}
?for
()
?rollmean
IQR(residuals)
IQR(value)
quantile(value)
quantile(value, 3/4)
class(quantile(value, 3/4))
shiny::runApp('Documents/Projects/outliers/app')
mm <- rollmedian(ts, input$windowmm, align="center")
mm <- rollmedian(ts, 5, align="center")
residuals <- coredata(mm) - coredata(ts[1:length(mm)])
upperIQR <- rollapply(residuals, 5, IQR)
upperIQR
length(upperIQR)
shiny::runApp('Documents/Projects/outliers/app')
quantile
shiny::runApp('Documents/Projects/outliers/app')
runGitHub("loess", "caremorris")
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
upperIQR <- rollapply(residuals, 5, boxplot.stats)
upperIQR
head(upperIQR)
head(upperIQR$stats)
upperIQR$stats
upperIQR[1,]
upperIQR[1,]$stats
upperIQR[1,]$stats[4]
upperIQR$stats[4]
for (i in length(upperIQR)) { upperIQR[i,]$stats[4] }
for (i %in% length(upperIQR)) { upperIQR[i,]$stats[4] }
upperIQR[2,]$stats[4]
upperIQR[200,]$stats[4]
?lines
class(upperIQR)
class(upperIQR[1,])
class(upperIQR[1,]$stats[4])
head(upperIQR[,1])
shiny::runApp('Documents/Projects/outliers/app')
length(upperIQR[,1]$stats[4])
length(upperIQR[,1][4])
length(upperIQR[,1])
class(upperIQR[,1])
class(upperIQR[1,1])
length(upperIQR[1,1])
upperIQR[1,1]
upperIQR[1,1]$stats
upperIQR[1,1]$stats[4]
upperIQR[,1]$stats[4]
upperIQR[,1]
upperIQR[,1][4]
head(upperIQR[,1])
class(upperIQR[,1][1])
upperIQR[,1][1]
upperIQR[,1][1][4]
upperIQR[,1][1]$4
upperIQR[,1][1][[4]]
upperIQR[,1][1][4]
upperIQR[,1][1]
upperIQR[,1][1][1]
upperIQR[,1][1][4]
class(upperIQR[,1][1])
upperIQR[[1]]
upperIQR[[1]] == upperIQR[,1][1]
class(upperIQR[[1]])
upperIQR[[1]][4]
upperIQR[[,1]]
upperIQR[[1]][4]
upperIQR[[2]][4]
upperIQR[,1][4]
upperIQR[[,1]][4]
upperIQR[,1][4]
upperIQR[[2]][4]
c(do.call("cbind", upperIQR[,1]))
upvec <- c(do.call("cbind", upperIQR[,1]))
upvec[4]
class(upvec)
class(upperIQR[,1])
length(upvec)
head(upvec)
head(upperIQR[,1])
v <- vector(upperIQR[,1])
v <- as.vector(upperIQR[,1])
head(v)
class(v)
class(upperIQR[,1])
v == upperIQR[,1]
typeof(v)
typeof(upperIQR[,1])
v <- c(upperIQR[,1])
class(v)
is.vector(v)
is.vector(upperIQR[,1])
head(upperIQR)
class(upperIQR)
typeof(upperIQR)
head(upperIQR)
head(upperIQR[,1])
upperIQR[[1]]
upperIQR[[1]][4]
x <- c(1,2,3,4)
i <- 1
while (i < 10) { upperIQR[[i]] }
while (i < 10) { upperIQR[[i]] i++ }
while (i < 10) { upperIQR[[i]]  }
while (i < 10) { upperIQR[[i]]
i <- i+1 }
index(residuals)
upperIQR[[index(residuals)]]
upperIQR[,index(residuals)]
upperIQR[[1]][4]
upperIQR[[2]][4]
upperIQR[[3]][4]
upperIQR[[7000]][4]
upperIQR[[1000]][4]
upperIQR[[800]][4]
upperIQR[,1]
upperIQR[,1][4]
upperIQR[,1][5]
upperIQR[[1]][4]
f <- head(upperIQR[[1]])
f
length(upperIQR[[1]])
f <- head(upperIQR[,1])
f
f[4]
f[4][4]
f[[4]]
f[[4]][4]
x<-c(1,2,3)
f[[x]][4]
?sapply
shiny::runApp('Documents/Projects/outliers/app')
sapply(upperIQR[,1], )
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
shiny::runApp('Documents/Projects/outliers/app')
library(itsmr)
setwd("~/Documents/STAT6041")
?acf
data <- (5,3,4,2,1,3,6,8,4,5)
data <- c(5,3,4,2,1,3,6,8,4,5)
TS <- ts(data, frequency = 2)
plot(TS, main="Original TS")
plot(TS, main="TS")
ACF <- Acf(TS)
?Acf
ACF <- acf(TS)
ACF$acf
ACF
mean(TS)
m <- 4.1
(3-m)(5-m)
(3-m)*(5-m)
(3-m)*(5-m) + (4-m)*(3-m) + (2-m)*(4-m) + (1-m)*(2-m) + (3-m)*(1-m) + (6-m)*(3-m) + (8-m)*(6-m) + (4-m)*(8-m) + (5-m)*(4-m)
3-m
5-m
m
4-m
3-m
2-m
1-4.1
6-4.1
8-4.1
1.1*0.9
.1*1.1
2.1*0.1
3.1*2.1
1.1*3.1
1.9*1.1
3.9*1.9
0.1*3.9
0.9*0.1
-.99+.11+.21+6.51+3.41-2.09+7.41-.39-.09
14.09/10
ACF <- acf(data)
ACF
TS <- ts(data)
ACF <- acf(TS)
ACF
setwd("~/Documents/STAT6041")
data <- c(5,3,4,2,1,3,6,8,4,5)
TS <- ts(data)
plot(TS)
# Autocorrelations
ACF <- acf(TS)
ACF
?variance
packages.install('sowas')
install.packages('sowas')
set.seed(123)
?set.seed
?rnorm
setwd("~/Documents/STAT6041")
#----- 1 -------------------------#
data <- c(5,3,4,2,1,3,6,8,4,5)
TS <- ts(data)
plot(TS)
# Autocorrelations
ACF <- acf(TS)
ACF
#----- 2 -------------------------#
WN <- rnorm(200, 0, 1)
WN <- rnorm(200, 0, 1)
WN
?sapply
install.packages('ttr')
?TTR
install.packages('TTR')
?TTR
library(TTR)
?TTR
?rollmean
library(TTR)
?TTR
TS <- WMA(WN, n=2, wts=c(0.2, -0.4))
TS <- WMA(WN, n=2, wts=c(0.2, -0.4))
TS
TS <- WMA(WN, n=2, wts=c(0.2, -0.4))
plot(WN)
lines(TS)
plot(WN)
plot(WN)
library(pracma)
MA <- filter(WN,
filter=c(0.2, -0.4),
method="convolution",
sides=1)
plot(WN)
lines(MA)
plot(MA,
main="Moving Average")
plot(MA,
main="Moving Average",
ylab="Value")
ACF <- acf(MA)
ACF
?acf
ACF <- acf(MA)
len(MA)
length(MA)
head(MA)
ACF <- acf(MA, na.action = na.pass)
ACF
plot(ACF)
?ACF
?acf
# Calculate the sample ACF and plot it
ACF <- acf(MA, lag.max = 100, na.action = na.pass)
ACF
# Calculate the sample ACF and plot it
ACF <- acf(MA, lag.max = 300, na.action = na.pass)
ACF
# Calculate the sample ACF and plot it
ACF <- acf(MA, lag.max = length(MA) - 1, na.action = na.pass)
ACF
shiny::runApp('Documents/Projects/outliers/app')
